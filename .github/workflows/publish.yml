name: Python CI

# publish on push to master
on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      influxdb:
        image: influxdb:2
        ports:
          - 8086:8086

      flask:
        image: python:3.9
        ports:
          - 5000:5000

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install InfluxDB CLI
        run: |
          wget https://download.influxdata.com/influxdb/releases/influxdb2-client-2.7.5-linux-amd64.tar.gz
          tar xvzf ./influxdb2-client-2.7.5-linux-amd64.tar.gz
          sudo cp ./influx /usr/local/bin/

      - name: Set up InfluxDB
        id: setup-influx
        run: |

          # passes to test database with no data
          INFLUX_USERNAME="test-user"
          INFLUX_PASSWORD="test-password"
          INFLUX_ORG="test-org"
          INFLUX_BUCKET="test-bucket"

          # setting up the database
          influx setup \
            --username "$INFLUX_USERNAME" \
            --password "$INFLUX_PASSWORD" \
            --org "$INFLUX_ORG" \
            --bucket "$INFLUX_BUCKET" \
            --force

          # saving information required for connection later
          echo "::set-output name=org::${INFLUX_ORG}"
          echo "::set-output name=bucket::${INFLUX_BUCKET}"

      - name: Authorization for InfluxDB
        id: auth
        run: |

          # authenticating the connection
          INFLUX_TOKEN=$(influx auth create \
            --user "$INFLUX_USERNAME" \
            --org "$INFLUX_ORG" \
            --all-access \
            --description "testing token" \
            --skip-verify \
            --json | jq '.token')
          
          # saving the token for the connection
          echo "::set-output name=token::${INFLUX_TOKEN}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install ruff
          pip install twine
          pip install -r requirements.txt

      - name: Lint with ruff
        run: |
          ruff format
          ruff check

      - name: Test with pytest
        run: |

          # starting the flask server, supplying some sample data
          export FLASK_APP="tests/dev_server"
          flask run --host=0.0.0.0 --port=9000 &
          sleep 5

          # setting the connection variables as for the pytest to use
          export PYTHONPATH="$PYTHONPATH:$(pwd)"
          export INFLUXDB_HOST="localhost"
          export INFLUXDB_PORT=8086
          export INFLUXDB_TOKEN=${{steps.auth.outputs.token}}
          export INFLUXDB_ORG=${{steps.setup-influx.outputs.org}}
          export INFLUXDB_BUCKET=${{steps.setup-influx.outputs.bucket}}
          pytest 

      - name: Build the application
        run: |
          python3 -m build

      - name: Publish to the PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python3 -m twine upload dist/*
